pipeline {
    agent any

    tools {
        maven 'Maven_3.9.1'      // Replace with your Maven installation name in Jenkins
        jdk 'JDK_17'             // Replace with your JDK installation name in Jenkins
    }

    environment {
        APP_NAME = "spring-boot-jenkins"
        JAR_NAME = "spring-boot-jenkins-0.0.1-SNAPSHOT.jar"
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_IMAGE = "chennaraobolagani/spring-boot-jenkins-app:${IMAGE_TAG}"
    }

    stages {

        stage('Checkout') {
            steps {
                git 'https://github.com/ChennaraoBolagani/EmployeeSpring.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Docker Build') {
            steps {
                sh "docker build -t spring-boot-jenkins-app ."
            }
        }

        stage('Docker Tag & Push') {
            when {
                branch 'main'
            }
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'dockerhub-creds',
                    usernameVariable: 'DOCKERHUB_USER',
                    passwordVariable: 'DOCKERHUB_PASS')]) {
                    
                    sh """
                        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                        docker tag spring-boot-jenkins-app $DOCKER_IMAGE
                        docker push $DOCKER_IMAGE
                    """
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker images...'
            sh 'docker image prune -f'
        }
        success {
            echo '✅ Pipeline completed successfully.'
        }
        failure {
            echo '❌ Pipeline failed.'
        }
    }
}
